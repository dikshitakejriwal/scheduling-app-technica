class Task{
    constructor(name, difficulty, priority, subtasks, notes){
        this.name = name;
        this.difficulty = difficulty;
        this.priority = priority;
        this.subtasks = subtasks;
        this.notes = notes;
    }
}

class Block{
    constructor(name, strat, end){
        this.name = name;
        this.start = this.start;
        this.end = this.end;
    }
}

//adds a task to the taskArr
function taskToArr(){
    var name = document.getElementById("frm1");
    var difficulty = document.getElementById("diff");
    var priority = document.getElementById("frm1");
    var subtasks = document.getElementById("frm1");
    var notes = document.getElementById("notes");
    let newTask = new Task(name, difficulty, priority, subtasks, notes);
    taskArr.push(newTask);
}



//Array that represents the Tasks
const taskArr = [];

//Array that represents the blocks
const blockArr = [];

//Array that represent the times
const timeLine = [];
for(let i = 1; i <= 1440; i++){
    timeLine[i] = 0
}


//adds a task to the taskArr
function taskToArr(){
    var name = document.getElementById("frm1");
    var difficulty = document.getElementById("diff");
    var priority = document.getElementById("frm1");
    var subtasks = document.getElementById("frm1");
    var notes = document.getElementById("notes");
    let startTime = 0;
    let endtime = 0;
    let newTask = new Task("task 1", 4, 1, 3, "hello world", startTime, endtime);
    taskArr.push(newTask);
}

//takes all the data and creates the schedule 
function addBlocks(){
    let timeCounter = 0;
    let startCount = 0;
    let endcount = 0;
    let blockCounter = 0;

    for(let i = 0; i < 1440; i++){
        //create an event using the number in timeLine[i - 1] to know what type of block it is
        if(timeLine > 0 && timeLine[i] != timeline[i - 1]){
                endcount = i - 1;

            //if its a -1 blockCounter will know which block it is based on blockArr index number
            if(timeLine[i -1] == -1){
                
                //create unavailable Block
                blockCounter++;
            
            } else if(timeLine[i -1] == -2){ // if its a -2 a break block will be added
                
                //create break block

            } else { // if it's a number > 0 the number will tell you which task in taskArr it is by priority number

                //create task Block
            }

            startCount = i;
            

        }
    }   
}



// adds a task to the calendar 
function addTasks(){
    for(let i = 0; i < taskArr.length; i++){
        let tracker = 0;
        //finds next priority to put into the timeLine
        for(let order = 0; order < taskArr.length; order++){
            if(taskArr[order].priority = i + 1){
                tracker = order;
                break;
            }
        }

        let time = 0;
    //sets the base time based on the difficulty amount
    if(taskArr[tracker].difficulty == 1){
        time = 20;
    } else if(taskArr[tracker].difficulty == 2){
        time = 30;
    } else if (taskArr[tracker].difficulty == 3){
        time = 40;
    } else if (taskArr[tracker].difficulty == 4){
        time = 50;
    } else{
        time = 60;
    }

    time = time * subtask;
    let breakCount = 0;

    //goes through the timeLine array and changes the values of the number to represent what should go in that time block
    // 0 - empty minute
    // -1 - unavailable block
    // -2 - break block 
    // 1 - priority 1 task 
    // ect. - priority etc. task
    for(let j = 0; j <= 1440; i++){
        //adds task of priority # into empty minutes
        if(timeLine[j] == 0){
            time -= 1; // keeps track of how many minutes have been allocated into the timeline
            breakCount++; // keeps track of when breaks are needed
            timeLine[j] = i + 1; 

            //if time = 0 then task is over and as much time is available until a block is provided
            if(time == 0){
                for(let k = 1; k <= 30; k++){
                    j++;
                    if(j > 1440 || timeLine[j] != 0){
                    j--;
                    break;
                    }
                    timeLine[j] = -2;
                }
                break;
            } else if (breakCount == 30){
                //if breakCount is 30 then a 5 minute break is needed
                for(let k = 1; k <= 5; k++){
                    j++;
                    if(j > 1440 || timeLine[j] != 0){
                    j--;
                    break;
                    }
                    timeLine[j] = -2;
                }
            }
        } else{ 
            //this indicates there has been a break in 0's in the time line
            // breaks are only had after 30 c0nsecutive 0's
            breakCount = 0;
        }

    }
}
}


//Time calculator, returns time in minutes which represents the index
function time (hours, minutes){
    return totalTime = hours*60 + minutes;
}



//Determining the times the user is not available
function addBlock (name, start, end) {
    let blockName = name;
    let duration = end - start;
    for(let i = start; i < duration; i++){
        timeLine[i] = -1;
    }
}
